
stages:
  - format
  - docker_build
  - prebuild
  - rust
  - build
  - release
  - publish
  - test
  - clean-up


include:
  - gitlab/common.yml
  - gitlab/python.yml
  - gitlab/android.yml
  - gitlab/ios.yml
  - gitlab/docker.yml


## disables MR-triggered pipelines and allows only branch-triggered pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always


test_format:
  extends: .debian-image
  stage: format
  script:
    - if grep 'json({}' src/*pp; then echo "The json brace initializer ctor is not supported by some compilers, use j_empty instead"; echo exit 1; fi
    - if grep -P '^ +nlohmann::json [a-z0-9_]+\({}' src/*pp; then echo "The json brace initializer ctor is not supported by some compilers, use j_empty instead"; echo exit 1; fi
    - ./tools/format.sh && git diff --exit-code


test_clang_tidy:
  extends: .debian-image
  stage: test
  needs: [ upload-python-gcloud ]
  script:
    - (echo "#define GDK_COMMIT \"$(git rev-parse HEAD)}\""; echo "") > include/version.h
    - ./tools/clang-tidy.sh /prebuild/clang


build_gcc_bullseye:
  extends: .debian-image
  stage: build
  script:
    - ./tools/build.sh --gcc --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/gcc --parallel 16 --enable-tests
    - cmake --build build-gcc --target green_gdk_java --parallel 16
    - cmake --install build-gcc --prefix install-java
    - cmake --install build-gcc --prefix install-java --component gdk-java
  artifacts:
    expire_in: 2 hrs
    paths:
      - build-gcc/tests
      - build-gcc/CTestTestfile.cmake
      - install-java


test_gcc_bullseye:
  extends: .debian-image
  stage: test
  needs: [build_gcc_bullseye]
  script:
    - cd build-gcc
    - ctest


build_clang_bullseye:
  extends: .debian-image
  stage: build
  script:
    - ./tools/build.sh --clang --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/clang --parallel 16
    - cmake --install build-clang --prefix install-clang
    - cmake --install build-clang --prefix install-clang --component gdk-dev
  artifacts:
    expire_in: 2 hrs
    paths:
      - install-clang


test_rust:
  extends: .debian-image
  stage: rust
  needs: [ rust_audit ]
  variables:
    OPENSSL_DIR: "/prebuild/clang"
    RUSTFLAGS: "-C instrument-coverage"
    RUST_BACKTRACE: "1"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
    CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
  script:
    - cargo nextest run --profile ci --manifest-path subprojects/gdk_rust/Cargo.toml
    - grcov --binary-path subprojects/gdk_rust/target/debug/ -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o coverage.xml -p `pwd` subprojects/gdk_rust
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 1 day
    paths:
      - subprojects/gdk_rust/target/nextest/ci/junit.xml
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: subprojects/gdk_rust/target/nextest/ci/junit.xml
  allow_failure: true


rust_audit:
  extends: .debian-image
  stage: rust
  allow_failure: true
  script:
    - cd subprojects/gdk_rust/
    - cargo audit -D warnings --ignore RUSTSEC-2021-0127


build_clang_fedora:
  extends: .fedora-image
  stage: build
  script:
    - source /root/.cargo/env
    - ./tools/build.sh --clang --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/clang --parallel 16


build_gcc_ubuntu20.04:
  extends: .ubuntu-image
  stage: build
  script:
    - ./tools/build.sh --gcc --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/gcc --parallel 16


build_gcc_ubuntu2004_arm64:
  extends: .ubuntu-arm64-image
  stage: build
  when: manual
  script:
    - source /root/.cargo/env
    - ./tools/build.sh --gcc --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/gcc --parallel 4 --static
    - cmake --build build-gcc --target green_gdk_java --parallel 4
    - cmake --install build-gcc --prefix install-java
    - cmake --install build-gcc --prefix install-java --component gdk-java
  artifacts:
    expire_in: 2 hrs
    paths:
      - install-java


build_mingw64_windows:
  extends: .debian-image
  stage: build
  variables:
    INSTALL_PATH: "install-gdk"
  script:
    - ./tools/build.sh --mingw-w64 --buildtype release --no-deps-rebuild --external-deps-dir /prebuild/mingw-w64 --parallel 16
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    expire_in: 1h
    when: on_success
    paths:
    - build-windows-mingw-w64/archiver.sh


build_clang_osx:
  extends:
    - .osx_env
    - .py_release
  parallel:
    matrix:
      - RUNNER: [ia, m1]
  tags:
    - osx-$RUNNER
  stage: prebuild
  needs: [ test_format ]
  script:
    - python3.9 -m venv venv
    - source venv/bin/activate
    - pip install -r ./tools/requirements.txt
    - PREBUILT_DIR="$CI_BUILDS_DIR/$PREBUILT_SUBDIR/clang-osx"
    - if [[ ! -d "$PREBUILT_DIR" ]]; then ./tools/builddeps.sh --parallel 16 --clang --prefix $PREBUILT_DIR; fi
    - touch $CI_BUILDS_DIR/$PREBUILT_SUBDIR/last_use # marking last use to help out during sweeping operations
    - ./tools/build.sh --clang --buildtype release --install $INSTALL_PATH --no-deps-rebuild --python-version venv --external-deps-dir $PREBUILT_DIR --parallel 16
    - mkdir -p wheelhouse
    - cp $INSTALL_PATH/share/python/* wheelhouse


build_aws_lambda:
  extends:
    - .aws-lambda-image
    - .py_release
  stage: build
  script:
    - ./tools/build.sh --gcc --python-version=3.10 --buildtype release --install $INSTALL_PATH --no-deps-rebuild --external-deps-dir /prebuild/gcc --parallel 16
    - mkdir -p wheelhouse
    - mv $INSTALL_PATH/share/python/*.whl $(ls $INSTALL_PATH/share/python/*.whl | sed 's/_x86_64/_x86_64.aws_lambda/g')
    - mv $INSTALL_PATH/share/python/*.whl wheelhouse


apidocs:
  extends: .debian-image
  stage: build
  needs: [ test_format ]
  artifacts:
    expire_in: 3 days
    when: on_success
    paths:
    - apidocs.tar.gz
  script:
    - virtualenv -p python3 .venv
    - source .venv/bin/activate
    - pip3 install -r docs/requirements.txt
    - sphinx-build -b html -a -c docs/source docs/source docs/build/html
    - cd docs/build && tar czf ../../apidocs.tar.gz html/ && cd ../..
    - deactivate


jumbo-release:
  extends: .debian-image
  stage: release
  needs: [build-android, build_clang_bullseye, build_gcc_ubuntu2004_arm64]
  artifacts:
    expire_in: 7 days
    when: on_success
    paths:
    - archive.tar.gz
  script:
    - suffix=${CI_COMMIT_TAG}
    - if [ -z ${suffix} ]; then suffix=${CI_COMMIT_SHORT_SHA}; fi
    - mkdir gdk-${suffix}
    - cp -r install-clang/* gdk-${suffix}/
    - cp -r install-java/lib/* gdk-${suffix}/lib
    - cp -r gdk-android-jni/lib gdk-${suffix}/
    - cp -r gdk-android-jni/share gdk-${suffix}/

    - tar -czf archive.tar.gz gdk-${suffix} --remove-files


clean_osx:
  stage: clean-up
  parallel:
    matrix:
      - RUNNER: [ia, m1]
  tags:
    - osx-$RUNNER
  needs: [ upload-ios-gcloud, upload-python-gcloud ]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - cd $CI_BUILDS_DIR
    - prebuilts=$(find . -name "prebuilt-*" -type d -maxdepth 1)
    - for p in ${prebuilts[@]}; do if [ ! -f "$p/last_use" ]; then echo "removing $p";rm -rf $p; fi; done  # old file format // TODO: remove in the future
    - prebuilts=$(find . -name "prebuilt-*" -type d -maxdepth 1)
    - for p in ${prebuilts[@]}; do elapsed=$(( `date +%s` - `stat -f "%m" "$p/last_use"` )); if [ "$elapsed" -gt "2592000" ]; then echo "removing $p"; rm -rf $p; fi; done
